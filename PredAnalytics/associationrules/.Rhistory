}
}
apply(data, c(957,10), change_to_nums)
change_to_nums('pos')
change_to_nums('x')
change_to_nums('o')
change_to_nums('b')
apply(data, c(957,10), change_to_nums)
View(data)
is.na(data)
data[is.na(data) == TRUE,]
rm(x)
rm(test)
rm(train)
rm(mod)
rm(L_model)
rm(P_model)
rm(R_model)
print_v <- function(x) {print(x)}
apply(data, c(957,10), print_v)
apply(data, c(957,10), print_v(x))
apply(data, c(957,10), print_v(x2))
tmp <- c(1,2,3,4)
apply(tmp, 1, print_v)
matrix(c(1,2,3,4))
apply(matrix(c(1,2,3,4)), 1, print_v)
matrix(c(1,2,3,4)
)
apply(matrix(c(1,2,3,4)), 1, mean)
apply(matrix(c(1,2,3,4), nrow = 1, ncol = 4), 1, mean)
apply(matrix(c(1,2,3,4), nrow = 4, ncol = 1), 1, mean)
library(e1071)
library(caret)
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
print_v <- function(x) {print(x)}
apply(data, c(957,10), print_v(x))
apply(data, c(957,10), print_v)
x <- matrix(c(1,2,3,4,5), nrow=4, ncol=2)
x <- matrix(c(1,2,3,4), nrow=4, ncol=2)
x
print_v <- function(x) {print(x)}
apply(x, c(4,2), print_v)
x <- matrix(c(1,2,3,4), nrow=4, ncol=1)
apply(x, c(4,2), print_v)
change_to_nums <- function(dp) {
if (is.na(x)) {
## do nothing if it's na
}
else if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
x <- matrix(c(1,2,3,4), nrow=4, ncol=1)
apply(x, c(4,2), print_v)
change_to_nums <- function(dp) {
if (!is.na(x)) {
if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
}
x <- matrix(c(1,2,3,4), nrow=4, ncol=1)
apply(x, c(4,2), print_v)
change_to_nums <- function(dp) {
if (!is.na(x)) {
if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
}
if (!is.na(dp)) {
if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
}
apply(data, c(957,10), change_to_nums)
print_v <- function(x) {
if(!is.na(x)){
print(x)
}
}
apply(x, c(4,2), print_v)
x <- matrix(c(1,2,3,4), nrow=4, ncol=1)
apply(x, 1, print_v)
apply(data, c(1,2), print_v)
apply(data, c(957,10), change_to_nums)
apply(data, c(1,2), change_to_nums)
daa
data
n <- dim(data)[1]
n
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data
n <- dim(data)[1]
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
y = train$Class
train
train$Class
typeof(train)
typeof(data)
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
typeof(data)
View(data)
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data$Class
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
data$Class
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data$Class
#apply the function to each item...
data <- as.data.frame(apply(data, c(1,2), change_to_nums))
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
#apply the function to each item...
data <- as.data.frame(apply(data, c(1,2), change_to_nums))
data$Class
n <- dim(data)[1]
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
y = train$Class
x = subset(train, select=-Class)
P_model <- train(x,y, method="svmPoly", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
L_model <- train(x,y, method="svmLinear", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
R_model <- train(x,y, method="svmRadial", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
data
typeof(data)
typeof(data$top.left.square)
x
typeof(x)
typeof(x$top.left.square)
P_model <- train(x,y, method="svmPoly", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
y
?train
L_model <- train(x,y, method="svmLinear", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
warnings()
View(data)
View(train)
View(x)
sapply(train, class)
data[,c(1:9)] <- sapply(data[,c(1:9)], as.numeric)
n <- dim(data)[1]
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
sapply(train, class)
y = train$Class
x = subset(train, select=-Class)
P_model <- train(x,y, method="svmPoly", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
L_model <- train(x,y, method="svmLinear", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
R_model <- train(x,y, method="svmRadial", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
P_model
L_model
R_model
R_model$results
R_model$results[3]
##Which one gave us the best results..
max(R_model$results[3])
max(L_model$results[3])
L_model$results
L_model
max(R_model$results[3])
##Which one gave us the best results..
max(P_model$results[3])
P_model$results
##Which one gave us the best results..
max(P_model$results[4])
max(L_model$results[2])
max(R_model$results[3])
pred <- predict(P_model, test)
cl = data[t2,]$Class
confusionMatrix(pred, cl)
getwd()
library(arules)
pre_data <- read.csv("maincharlesbook.csv")
setwd("Documents/School/MSDS/github/homework/PredAnalytics/associationrules/")
pre_data <- read.csv("maincharlesbook.csv")
View(pre_data)
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
library(arules)
data = read.transactions("maincharlesbook_clean_final.csv", format="basket", sep=",")
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data=data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data=data, parameter = list(supp = 0.01, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="support")
inspect(rules)
pre_data$YouthBks <- ifelse(grepl("^0$", pre_data$YouthBks), NA, "YouthBks")
pre_data$CookBks <- ifelse(grepl("^0$", pre_data$CookBks), NA, "CookBks")
pre_data$DoItYBks <- ifelse(grepl("^0$", pre_data$DoItYBks), NA, "DoItYBks")
pre_data$RefBks <- ifelse(grepl("^0$", pre_data$RefBks), NA, "RefBks")
pre_data$ArtBks <- ifelse(grepl("^0$", pre_data$ArtBks), NA, "ArtBks")
pre_data$GeogBks <- ifelse(grepl("^0$", pre_data$GeogBks), NA, "GeogBks")
pre_data$ItalCook <- ifelse(grepl("^0$", pre_data$ItalCook), NA, "ItalCook")
pre_data$ItalAtlas <- ifelse(grepl("^0$", pre_data$ItalAtlas), NA, "ItalAtlas")
pre_data$ItalArt <- ifelse(grepl("^0$", pre_data$ItalArt), NA, "ItalArt")
pre_data$Florence <- ifelse(grepl("^0$", pre_data$Florence), NA, "Florence")
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="confidence")
inspect(rules)
pre_data <- read.csv("maincharlesbook.csv")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
library(arules)
pre_data <- read.csv("maincharlesbook.csv")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
pre_data$YouthBks <- ifelse(grepl("^0$", pre_data$YouthBks), NA, "YouthBks")
pre_data$CookBks <- ifelse(grepl("^0$", pre_data$CookBks), NA, "CookBks")
pre_data$DoItYBks <- ifelse(grepl("^0$", pre_data$DoItYBks), NA, "DoItYBks")
pre_data$RefBks <- ifelse(grepl("^0$", pre_data$RefBks), NA, "RefBks")
pre_data$ArtBks <- ifelse(grepl("^0$", pre_data$ArtBks), NA, "ArtBks")
pre_data$GeogBks <- ifelse(grepl("^0$", pre_data$GeogBks), NA, "GeogBks")
pre_data$ItalCook <- ifelse(grepl("^0$", pre_data$ItalCook), NA, "ItalCook")
pre_data$ItalAtlas <- ifelse(grepl("^0$", pre_data$ItalAtlas), NA, "ItalAtlas")
pre_data$ItalArt <- ifelse(grepl("^0$", pre_data$ItalArt), NA, "ItalArt")
pre_data$Florence <- ifelse(grepl("^0$", pre_data$Florence), NA, "Florence")
pre_data <- pre_data[,c("ChildBks", "YouthBks", "CookBks", "DoItYBks", "RefBks", "ArtBks", "GeogBks", "ItalCook",
"ItalAtlas", "ItalArt", "Florence")]
write.table(pre_data, file = "maincharlesbook_clean.csv", sep=",", col.names=FALSE)
write.table(pre_data, file = "maincharlesbook_clean.csv", sep=",", row.names = TRUE, col.names=FALSE)
write.table(pre_data, file = "maincharlesbook_clean.csv", sep=",", row.names = FALSE, col.names=FALSE)
library(arules)
pre_data <- read.csv("maincharlesbook.csv")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
pre_data$YouthBks <- ifelse(grepl("^0$", pre_data$YouthBks), NA, "YouthBks")
pre_data$CookBks <- ifelse(grepl("^0$", pre_data$CookBks), NA, "CookBks")
pre_data$DoItYBks <- ifelse(grepl("^0$", pre_data$DoItYBks), NA, "DoItYBks")
pre_data$RefBks <- ifelse(grepl("^0$", pre_data$RefBks), NA, "RefBks")
pre_data$ArtBks <- ifelse(grepl("^0$", pre_data$ArtBks), NA, "ArtBks")
pre_data$GeogBks <- ifelse(grepl("^0$", pre_data$GeogBks), NA, "GeogBks")
pre_data$ItalCook <- ifelse(grepl("^0$", pre_data$ItalCook), NA, "ItalCook")
pre_data$ItalAtlas <- ifelse(grepl("^0$", pre_data$ItalAtlas), NA, "ItalAtlas")
pre_data$ItalArt <- ifelse(grepl("^0$", pre_data$ItalArt), NA, "ItalArt")
pre_data$Florence <- ifelse(grepl("^0$", pre_data$Florence), NA, "Florence")
pre_data <- pre_data[,c("ChildBks", "YouthBks", "CookBks", "DoItYBks", "RefBks", "ArtBks", "GeogBks", "ItalCook",
"ItalAtlas", "ItalArt", "Florence")]
data = read.transactions("maincharlesbook_clean_final.csv", format="basket", sep=",")
rules <- apriori(data=data, parameter = list(supp = 0.01, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data=data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="confidence")
inspect(rules)
print("What is the top item(s) that indicates customers will also buy or get Cook Books?")
inspect(rules)
print("Top items are Child Books and Youth Books")
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.5),
appearance=list(default="rhs", lhs=c("ChildBks","YouthBks")),
control=list(verbose=F))
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="confidence")
inspect(rules)
print("Will your answer to the last question change if you use lift to select the best rule?")
rules <- sort(rules, decreasing = TRUE, by="lift")
inspect(rules)
rules <- apriori(data=data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
rules <- sort(rules, decreasing = TRUE, by="confidence")
print("What is the top item(s) that indicates customers will also buy or get Cook Books?")
print("Top items are Child Books and Youth Books")
inspect(rules)
print("Will your answer to the last question change if you use lift to select the best rule?")
rules <- sort(rules, decreasing = TRUE, by="lift")
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.5),
appearance=list(default="rhs", lhs=c("ChildBks","YouthBks")),
control=list(verbose=F))
rules <- sort(rules, decreasing = TRUE, by="confidence")
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="lift")
inspect(rules)
inspect(rules[1])
inspect(rules[1])
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.5),
appearance=list(default="rhs", lhs=c("ChildBks","YouthBks")),
control=list(verbose=F))
rules <- sort(rules, decreasing = TRUE, by="confidence")
print("What is the top items(s) that customers will also buy or get if they ahve already picked or bought child books and youth books together?")
print("Supporting our last analysis, customers will likely pick up Cook Books")
inspect(rules[1])
print("Will your answer to the last question change if you use lift to select the best rule?")
print("Yes, it will indeed change if we choose to use lift as a way of selecting the best rule")
print("Now, customers will likely pick up Do it yourself books as a top suggestion.")
rules <- sort(rules, decreasing = TRUE, by="lift")
inspect(rules[1])
system(ls)
system("ls -l")
library(arules)
pre_data <- read.csv("maincharlesbook.csv")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
pre_data$YouthBks <- ifelse(grepl("^0$", pre_data$YouthBks), NA, "YouthBks")
pre_data$CookBks <- ifelse(grepl("^0$", pre_data$CookBks), NA, "CookBks")
pre_data$DoItYBks <- ifelse(grepl("^0$", pre_data$DoItYBks), NA, "DoItYBks")
pre_data$RefBks <- ifelse(grepl("^0$", pre_data$RefBks), NA, "RefBks")
pre_data$ArtBks <- ifelse(grepl("^0$", pre_data$ArtBks), NA, "ArtBks")
pre_data$GeogBks <- ifelse(grepl("^0$", pre_data$GeogBks), NA, "GeogBks")
pre_data$ItalCook <- ifelse(grepl("^0$", pre_data$ItalCook), NA, "ItalCook")
pre_data$ItalAtlas <- ifelse(grepl("^0$", pre_data$ItalAtlas), NA, "ItalAtlas")
pre_data$ItalArt <- ifelse(grepl("^0$", pre_data$ItalArt), NA, "ItalArt")
pre_data$Florence <- ifelse(grepl("^0$", pre_data$Florence), NA, "Florence")
pre_data <- pre_data[,c("ChildBks", "YouthBks", "CookBks", "DoItYBks", "RefBks", "ArtBks", "GeogBks", "ItalCook",
"ItalAtlas", "ItalArt", "Florence")]
write.table(pre_data, file = "maincharlesbook_clean.csv", sep=",", row.names = FALSE, col.names=FALSE)
### Clean the data with our python script ###
system("python strip_data2.py")
data = read.transactions("maincharlesbook_clean_final.csv", format="basket", sep=",")
rules <- apriori(data=data, parameter = list(supp = 0.1, conf=0.8, minlen=2),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
rules <- sort(rules, decreasing = TRUE, by="confidence")
print("What is the top item(s) that indicates customers will also buy or get Cook Books?")
print("Top items are Child Books and Youth Books")
inspect(rules[1])
print("Will your answer to the last question change if you use lift to select the best rule?")
print("No, it appears Child Books and Youth Books are still the top suggestion.")
rules <- sort(rules, decreasing = TRUE, by="lift")
inspect(rules[1])
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.5),
appearance=list(default="rhs", lhs=c("ChildBks","YouthBks")),
control=list(verbose=F))
rules <- sort(rules, decreasing = TRUE, by="confidence")
print("What is the top items(s) that customers will also buy or get if they ahve already picked or bought child books and youth books together?")
print("Supporting our last analysis, customers will likely pick up Cook Books")
inspect(rules[1])
print("Will your answer to the last question change if you use lift to select the best rule?")
print("Yes, it will indeed change if we choose to use lift as a way of selecting the best rule")
print("Now, customers will likely pick up Do it yourself books as a top suggestion.")
rules <- sort(rules, decreasing = TRUE, by="lift")
inspect(rules[1])
