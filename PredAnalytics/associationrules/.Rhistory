return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
}
x <- matrix(c(1,2,3,4), nrow=4, ncol=1)
apply(x, c(4,2), print_v)
change_to_nums <- function(dp) {
if (!is.na(x)) {
if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
}
if (!is.na(dp)) {
if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(0)
}
else if (dp == 'o') {
return(1)
}
else if (dp == 'b') {
return(2)
}
else {
return(dp)
}
}
}
apply(data, c(957,10), change_to_nums)
print_v <- function(x) {
if(!is.na(x)){
print(x)
}
}
apply(x, c(4,2), print_v)
x <- matrix(c(1,2,3,4), nrow=4, ncol=1)
apply(x, 1, print_v)
apply(data, c(1,2), print_v)
apply(data, c(957,10), change_to_nums)
apply(data, c(1,2), change_to_nums)
daa
data
n <- dim(data)[1]
n
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data
n <- dim(data)[1]
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
y = train$Class
train
train$Class
typeof(train)
typeof(data)
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
typeof(data)
View(data)
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data$Class
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
data$Class
#apply the function to each item...
data <- apply(data, c(1,2), change_to_nums)
data$Class
#apply the function to each item...
data <- as.data.frame(apply(data, c(1,2), change_to_nums))
data <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data',
col.names = c('top-left-square', 'top-middle-square', 'top-right-square', 'middle-left-square',
'middle-middle-square','middle-right-square','bottom-left-square','bottom-middle-square',
'bottom-right-square', 'Class'))
### Change each char to a num
change_to_nums <- function(dp) {
if (!is.na(dp)) {
if (dp == 'x') {
return(-1)
}
else if (dp == 'o') {
return(0)
}
else if (dp == 'b') {
return(1)
}
else {
return(dp)
}
}
}
#apply the function to each item...
data <- as.data.frame(apply(data, c(1,2), change_to_nums))
data$Class
n <- dim(data)[1]
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
y = train$Class
x = subset(train, select=-Class)
P_model <- train(x,y, method="svmPoly", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
L_model <- train(x,y, method="svmLinear", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
R_model <- train(x,y, method="svmRadial", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
data
typeof(data)
typeof(data$top.left.square)
x
typeof(x)
typeof(x$top.left.square)
P_model <- train(x,y, method="svmPoly", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
y
?train
L_model <- train(x,y, method="svmLinear", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
warnings()
View(data)
View(train)
View(x)
sapply(train, class)
data[,c(1:9)] <- sapply(data[,c(1:9)], as.numeric)
n <- dim(data)[1]
t1 = sample(1:957, n*.8)
t2 = setdiff(1:957, t1)
train = subset(data[t1,])
test = subset(data[t2,], select =-Class)
sapply(train, class)
y = train$Class
x = subset(train, select=-Class)
P_model <- train(x,y, method="svmPoly", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
L_model <- train(x,y, method="svmLinear", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
R_model <- train(x,y, method="svmRadial", tuneLength=5,
trControl=trainControl(method='repeatedcv', number=10, repeats=10))
P_model
L_model
R_model
R_model$results
R_model$results[3]
##Which one gave us the best results..
max(R_model$results[3])
max(L_model$results[3])
L_model$results
L_model
max(R_model$results[3])
##Which one gave us the best results..
max(P_model$results[3])
P_model$results
##Which one gave us the best results..
max(P_model$results[4])
max(L_model$results[2])
max(R_model$results[3])
pred <- predict(P_model, test)
cl = data[t2,]$Class
confusionMatrix(pred, cl)
getwd()
setwd("Documents/School/MSDS/github/homework/PredAnalytics/associationrules/")
library(arules)
data = read.transactions("groceries.csv", format="basket", sep=",")
View(data)
rules <- apriori(data, parameter = list(supp = 0.001, conf=0.8))
summary(rules)
options(digits=2)
inspect(rules[1:5])
rules <- sort(rules, by="confidence", decreasing = TRUE)
rules <- apriori(data=data, parameter = list(supp=0.001, conf=0.08, minlen=3),
appearance = list(default="lhs", rhs="whole milk"), control=list(verbose=F))
rules <- sort(rules, decreasing = TRUE, by="confidence")
inspect(rules[1:5])
rules <- apriori(data=data, parameter=list(supp=0.001, conf=0.15, minlen=3),
appearance=list(default="rhs", lhs=c("butter","sugar")),
control = list(verbose=F))
rules <- sort(rules, decreasing=TRUE, by="confidence")
inspect(rules)
rules <- sort(rules, decreasing=TRUE, by="lift")
inspect(rules)
rules <- sort(rules, decreasing=TRUE, by="confidence")
inspect(rules)
rules <- sort(rules, decreasing=TRUE, by="lift")
inspect(rules)
library(arules)
data = read.transactions("maincharlesbook.csv", format="basket", sep=",")
library(arules)
data = read.transactions("groceries.csv", format="basket", sep=",")
data
View(data)
summary(data)
library(arules)
data = read.transactions("maincharlesbook.csv", format="basket", sep=",")
data
data = read.transactions("maincharlesbook.csv", format="basket", sep=",")
View(data)
head(data)
summary(data)
?read.transactions
pre_data <- read.csv("maincharlesbook.csv")
View(pre_data)
c("x","y","z")
c(c("x","y","z"), c("a","b","c","d"))
c(c("x","y","z","\r"), c("a","b","c","d"))
c(c("x","y","z","\n"), c("a","b","c","d"))
write.table(c(c("x","y","z\n"), c("a","b","c","d\n")), file="test.csv")
data.frame(c(c("x","y","z\n"), c("a","b","c","d\n")))
as.matrix(c(c("x","y","z\n"), c("a","b","c","d\n")))
?as.matrix
as.matrix(c("x","y","z"), nrow=1)
?as.matrix
as.matrix(c("x","y","z"), nrow=1,ncol=3)
as.matrix(c(c("x"),c("y"),c("z")), nrow=1)
as.matrix(c(c("x"),c("y"),c("z")), ncol=1)
as.matrix(c(c("x"),c("y"),c("z")), ncol=3)
as.matrix(t(c(c("x","y","z\n"), c("a","b","c","d\n"))))
write.table(t(c(c("x","y","z\n"), c("a","b","c","d\n"))), file="test.csv")
t(c("x","y","z"))
write.table(t(c(c("x","y","z\n")), file="test.csv"))
write.table(t(c(c("x","y","z\n"))), file="test.csv")
write.table(t(c(c("x","y","z\n"))), file="test.csv", col.names=FALSE)
?writeLines
writeLines(t(c(c("x","y","z\n"))), con="test.csv")
t(c(c("x","y","z\n")))
writeLines(t(c(c("x","y","z\n"))), con="test.csv",sep=",")
inputFile <- "maincharlesbook.csv"
con  <- file(inputFile, open = "r")
while (length(oneLine <- readLines(con, n = 1)) > 0) {
myLine <- unlist((strsplit(oneLine, ",")))
print(myLine)
}
close(con)
con  <- file(inputFile, open = "r")
while (length(oneLine <- readLines(con, n = 1)) > 0) {
myLine <- unlist((strsplit(oneLine, ",")))
print(myLine)
}
myLine[0]
myLine[1]
myLine[2]
myLine[3]
header <- c("Seq#",
"ID#",
"Gender",
"M",
"R",
"F",
"FirstPurch",
"ChildBks",
"YouthBks",
"CookBks",
"DoItYBks",
"RefBks",
"ArtBks",
"GeogBks",
"ItalCook",
"ItalAtlas",
"ItalArt",
"Florence",
"Related Purchase",
"Mcode",
"Rcode",
"Fcode",
"Yes_Florence",
"No_Florence")
pre_data <- read.csv("maincharlesbook.csv")
View(pre_data)
?grepl
grep("a","a")
grep("a","b")
pre_data$ChildBks <- ifelse(grep("^0$", pre_data$ChildBks), "", "ChildBks")
grep("^0$", pre_data$ChildBks)
grep("^0$", "0")
grep("^0$", "2293")
grep("^0$", pre_data$ChildBks)
pre_data$ChildBks <- ifelse(grep("^0$", pre_data$ChildBks), "", "ChildBks")
ifelse(grep("^0$", pre_data$ChildBks), "", "ChildBks")
library(dplyr)
pre_data %>%
as.data.table(keep.rownames = TRUE) %>%
pre_data %>%
as.data.table(keep.rownames = TRUE) %>%
melt(id.vars="rn", variable.name="V")
library(reshape2)
pre_data %>%
as.data.table(keep.rownames = TRUE) %>%
melt(id.vars="rn", variable.name="V")
pre_data %>%
melt(id.vars="rn", variable.name="V")
melt(pre_data)
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), "", "ChildBks")
library(arules)
pre_data <- read.csv("maincharlesbook.csv")
data = read.transactions("maincharlesbook.csv", format="basket", sep=",")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), "", "ChildBks")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), "", "ChildBks")
pre_data$YouthBks <- ifelse(grepl("^0$", pre_data$YouthBks), "", "YouthBks")
pre_data$CookBks <- ifelse(grepl("^0$", pre_data$CookBks), "", "CookBks")
pre_data$DoItYBks <- ifelse(grepl("^0$", pre_data$DoItYBks), "", "DoItYBks")
pre_data$RefBks <- ifelse(grepl("^0$", pre_data$RefBks), "", "RefBks")
pre_data$ArtBks <- ifelse(grepl("^0$", pre_data$ArtBks), "", "ArtBks")
pre_data$GeogBks <- ifelse(grepl("^0$", pre_data$GeogBks), "", "GeogBks")
pre_data$ItalCook <- ifelse(grepl("^0$", pre_data$ItalCook), "", "ItalCook")
pre_data$ItalAtlas <- ifelse(grepl("^0$", pre_data$ItalAtlas), "", "ItalAtlas")
pre_data$ItalArt <- ifelse(grepl("^0$", pre_data$ItalArt), "", "ItalArt")
pre_data$Florence <- ifelse(grepl("^0$", pre_data$Florence), "", "Florence")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), "", "ChildBks")
pre_data$YouthBks <- ifelse(grepl("^0$", pre_data$YouthBks), "", "YouthBks")
View(pre_data)
pre_data <- pre_data[,c("ChildBks", "YouthBks", "CookBks", "DoItYBks", "RefBks", "ArtBks", "GeogBks", "ItalCook",
"ItalAtlas", "ItalArt", "Florence")]
write.table(pre_data, col.names=FALSE, file = "maincharlesbook_clean.csv")
write.table(pre_data, col.names=FALSE, file = "maincharlesbook_clean.csv", sep=",")
?write.table
write.table(pre_data, col.names=FALSE, file = "maincharlesbook_clean.csv", sep=",", row.names = FALSE)
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
pre_data <- read.csv("maincharlesbook.csv")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
pre_data <- read.csv("maincharlesbook.csv")
pre_data$ChildBks <- ifelse(grepl("^0$", pre_data$ChildBks), NA, "ChildBks")
pre_data$YouthBks <- ifelse(grepl("^0$", pre_data$YouthBks), NA, "YouthBks")
pre_data$CookBks <- ifelse(grepl("^0$", pre_data$CookBks), NA, "CookBks")
pre_data$DoItYBks <- ifelse(grepl("^0$", pre_data$DoItYBks), NA, "DoItYBks")
pre_data$RefBks <- ifelse(grepl("^0$", pre_data$RefBks), NA, "RefBks")
pre_data$ArtBks <- ifelse(grepl("^0$", pre_data$ArtBks), NA, "ArtBks")
pre_data$GeogBks <- ifelse(grepl("^0$", pre_data$GeogBks), NA, "GeogBks")
pre_data$ItalCook <- ifelse(grepl("^0$", pre_data$ItalCook), NA, "ItalCook")
pre_data$ItalAtlas <- ifelse(grepl("^0$", pre_data$ItalAtlas), NA, "ItalAtlas")
pre_data$ItalArt <- ifelse(grepl("^0$", pre_data$ItalArt), NA, "ItalArt")
pre_data$Florence <- ifelse(grepl("^0$", pre_data$Florence), NA, "Florence")
pre_data <- pre_data[,c("ChildBks", "YouthBks", "CookBks", "DoItYBks", "RefBks", "ArtBks", "GeogBks", "ItalCook",
"ItalAtlas", "ItalArt", "Florence")]
data = read.transactions("maincharlesbook_clean.csv", format="basket", sep=",")
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8))
summary(rules)
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="lhs", rhs="CookBks"))
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="lhs", rhs=c("CookBks")))
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8, minlen=3),
appearance=list(default="lhs", rhs="CookBks"))
inspect(rules)
View(data)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules
rules <- apriori(data, parameter=list(supp=0.1, conf=0.8))
inspect(rules)
sort(rules)
sort(rules, decreasing = TRUE, by="rhs")
rules[1]
inspect(rules[1])
inspect(rules)
rules
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.8),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="rhs", lhs="CookBks"),
control=list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.8),
appearance=list(default="lhs", rhs="CookBks"),
control=list(verbose=F))
inspect(rules)
sort(rules, decreasing = TRUE, by="support")
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="support")
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.8),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
data = read.transactions("maincharlesbook_clean.csv", format="basket", sep=",")
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="support")
data = read.transactions("maincharlesbook_clean_final.csv", format="basket", sep=",")
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="support")
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.8),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="support")
data = read.transactions("maincharlesbook_clean_final.csv", format="basket", sep=",")
rules <- apriori(data, parameter = list(supp = 0.1, conf=0.8),
appearance=list(default="lhs", rhs=c("CookBks","ItalCook")),
control=list(verbose=F))
inspect(rules)
rules <- sort(rules, decreasing = TRUE, by="support")
rules <- apriori(data, parameter = list(supp = 0.01, conf=0.5),
appearance=list(default="rhs", lhs=c("ChildBks","YouthBks")),
control=list(verbose=F))
inspect(rules)
